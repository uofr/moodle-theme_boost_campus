{"version":3,"sources":["../src/autocomplete_ref.js"],"names":["autocomplete","inp","arr","currentFocus","addEventListener","a","b","i","val","value","closeAllLists","document","createElement","setAttribute","id","parentNode","appendChild","length","substr","toUpperCase","innerHTML","getElementsByTagName","e","x","getElementById","keyCode","addActive","preventDefault","click","removeActive","classList","add","remove","elmnt","getElementsByClassName","removeChild","target"],"mappings":"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","sourcesContent":["/**\n * \n * @param {*} inp \n * @param {*} arr \n */\nfunction autocomplete(inp, arr) {\n    /*the autocomplete function takes two arguments,\n    the text field element and an array of possible autocompleted values:*/\n    var currentFocus;\n    /*execute a function when someone writes in the text field:*/\n    inp.addEventListener(\"input\", function(e) {\n        var a, b, i, val = this.value;\n        /*close any already open lists of autocompleted values*/\n        closeAllLists();\n        if (!val) { return false;}\n        currentFocus = -1;\n        /*create a DIV element that will contain the items (values):*/\n        a = document.createElement(\"DIV\");\n        a.setAttribute(\"id\", this.id + \"autocomplete-list\");\n        a.setAttribute(\"class\", \"autocomplete-items\");\n        /*append the DIV element as a child of the autocomplete container:*/\n        this.parentNode.appendChild(a);\n        /*for each item in the array...*/\n        for (i = 0; i < arr.length; i++) {\n          /*check if the item starts with the same letters as the text field value:*/\n          if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {\n            /*create a DIV element for each matching element:*/\n            b = document.createElement(\"DIV\");\n            /*make the matching letters bold:*/\n            b.innerHTML = \"<strong>\" + arr[i].substr(0, val.length) + \"</strong>\";\n            b.innerHTML += arr[i].substr(val.length);\n            /*insert a input field that will hold the current array item's value:*/\n            b.innerHTML += \"<input type='hidden' value='\" + arr[i] + \"'>\";\n            /*execute a function when someone clicks on the item value (DIV element):*/\n                b.addEventListener(\"click\", function(e) {\n                /*insert the value for the autocomplete text field:*/\n                inp.value = this.getElementsByTagName(\"input\")[0].value;\n                /*close the list of autocompleted values,\n                (or any other open lists of autocompleted values:*/\n                closeAllLists();\n            });\n            a.appendChild(b);\n          }\n        }\n    });\n    /*execute a function presses a key on the keyboard:*/\n    inp.addEventListener(\"keydown\", function(e) {\n        var x = document.getElementById(this.id + \"autocomplete-list\");\n        if (x) x = x.getElementsByTagName(\"div\");\n        if (e.keyCode == 40) {\n          /*If the arrow DOWN key is pressed,\n          increase the currentFocus variable:*/\n          currentFocus++;\n          /*and and make the current item more visible:*/\n          addActive(x);\n        } else if (e.keyCode == 38) { //up\n          /*If the arrow UP key is pressed,\n          decrease the currentFocus variable:*/\n          currentFocus--;\n          /*and and make the current item more visible:*/\n          addActive(x);\n        } else if (e.keyCode == 13) {\n          /*If the ENTER key is pressed, prevent the form from being submitted,*/\n          e.preventDefault();\n          if (currentFocus > -1) {\n            /*and simulate a click on the \"active\" item:*/\n            if (x) x[currentFocus].click();\n          }\n        }\n    });\n    function addActive(x) {\n      /*a function to classify an item as \"active\":*/\n      if (!x) return false;\n      /*start by removing the \"active\" class on all items:*/\n      removeActive(x);\n      if (currentFocus >= x.length) currentFocus = 0;\n      if (currentFocus < 0) currentFocus = (x.length - 1);\n      /*add class \"autocomplete-active\":*/\n      x[currentFocus].classList.add(\"autocomplete-active\");\n    }\n    function removeActive(x) {\n      /*a function to remove the \"active\" class from all autocomplete items:*/\n      for (var i = 0; i < x.length; i++) {\n        x[i].classList.remove(\"autocomplete-active\");\n      }\n    }\n    function closeAllLists(elmnt) {\n      /*close all autocomplete lists in the document,\n      except the one passed as an argument:*/\n      var x = document.getElementsByClassName(\"autocomplete-items\");\n      for (var i = 0; i < x.length; i++) {\n        if (elmnt != x[i] && elmnt != inp) {\n        x[i].parentNode.removeChild(x[i]);\n      }\n    }\n  }\n  /*execute a function when someone clicks in the document:*/\n  document.addEventListener(\"click\", function (e) {\n      closeAllLists(e.target);\n  });\n}"],"file":"autocomplete_ref.min.js"}